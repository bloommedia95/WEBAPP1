<%- include('partials/head') %>
<%- include('./partials/sidebar') %>
<%- include('./partials/topbar') %>

<div class="content">
  <div class="dashboard-container">
    <!-- PRODUCTS Style Header -->
    <div class="page-header">
      <div class="page-title-section">
        <h1 class="page-title">DASHBOARD OVERVIEW</h1>
      </div>
      <div class="page-actions">
        <button class="refresh-btn" onclick="loadDashboardData()">🔄</button>
      </div>
    </div>

    <!-- Enhanced Overview Cards -->
    <div class="overview-section">
      <div class="overview-grid">
        <div class="overview-card today gradient-blue">
          <div class="card-background">
            <div class="card-pattern"></div>
          </div>
          <div class="card-content">
            <div class="card-icon">💰</div>
            <div class="card-info">
              <h3>Today's Orders</h3>
              <p class="value" id="todayTotal">₹0.00</p>
              <div class="breakdown">
                <div class="payment-method">
                  <span class="method-icon">💵</span>
                  <span>Cash: <span id="todayCash">₹0.00</span></span>
                </div>
                <div class="payment-method">
                  <span class="method-icon">💳</span>
                  <span>Card: <span id="todayCard">₹0.00</span></span>
                </div>
                <div class="payment-method">
                  <span class="method-icon">🏦</span>
                  <span>Credit: <span id="todayCredit">₹0.00</span></span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="overview-card yesterday gradient-pink">
          <div class="card-background">
            <div class="card-pattern"></div>
          </div>
          <div class="card-content">
            <div class="card-icon">📈</div>
            <div class="card-info">
              <h3>Yesterday's Orders</h3>
              <p class="value" id="yesterdayTotal">₹0.00</p>
              <div class="breakdown">
                <div class="payment-method">
                  <span class="method-icon">💵</span>
                  <span>Cash: <span id="yesterdayCash">₹0.00</span></span>
                </div>
                <div class="payment-method">
                  <span class="method-icon">💳</span>
                  <span>Card: <span id="yesterdayCard">₹0.00</span></span>
                </div>
                <div class="payment-method">
                  <span class="method-icon">🏦</span>
                  <span>Credit: <span id="yesterdayCredit">₹0.00</span></span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="overview-card month gradient-cyan">
          <div class="card-background">
            <div class="card-pattern"></div>
          </div>
          <div class="card-content">
            <div class="card-icon">🛒</div>
            <div class="card-info">
              <h3>This Month</h3>
              <p class="value" id="thisMonthTotal">₹0.00</p>
              <div class="trend positive">
                <span class="trend-icon">📈</span>
                <span>+12.3% vs last month</span>
              </div>
            </div>
          </div>
        </div>

        <div class="overview-card last-month gradient-green">
          <div class="card-background">
            <div class="card-pattern"></div>
          </div>
          <div class="card-content">
            <div class="card-icon">💳</div>
            <div class="card-info">
              <h3>Last Month</h3>
              <p class="value" id="lastMonthTotal">₹0.00</p>
              <div class="trend neutral">
                <span class="trend-icon">📊</span>
                <span>Historical data</span>
              </div>
            </div>
          </div>
        </div>

        <div class="overview-card all-time gradient-orange">
          <div class="card-background">
            <div class="card-pattern"></div>
          </div>
          <div class="card-content">
            <div class="card-icon">🏆</div>
            <div class="card-info">
              <h3>All-Time Sales</h3>
              <p class="value" id="allTimeTotal">₹0.00</p>
              <div class="trend positive">
                <span class="trend-icon">�</span>
                <span>Total revenue</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Enhanced KPI Section -->
    <div class="kpi-section">
      <div class="section-header">
        <h2 class="section-title">
          <span class="title-icon">⚡</span>
          Key Performance Indicators
        </h2>
        <div class="section-actions">
          <button class="refresh-btn" onclick="loadDashboardData()">🔄</button>
        </div>
      </div>
      <div class="kpi-grid" id="kpiGrid">
        <!-- Will be populated by JavaScript -->
      </div>
    </div>

    <!-- Enhanced Charts Section -->
    <div class="charts-section">
      <div class="chart-container revenue-chart">
        <div class="chart-panel">
          <div class="panel-header">
            <div class="panel-title">
              <span class="panel-icon">💰</span>
              <h2>Revenue Analysis</h2>
              <span class="panel-subtitle">Last 12 months performance</span>
            </div>
            <div class="chart-controls">
              <select id="revenue-range" class="modern-select">
                <option value="12">12 Months</option>
                <option value="6">6 Months</option>
                <option value="3">3 Months</option>
                <option value="1">1 Month</option>
              </select>
              <button class="refresh-btn" onclick="loadRevenueChart()">
                <span>🔄</span>
              </button>
            </div>
          </div>
          <div class="chart-wrapper">
            <div class="chart-container-inner">
              <canvas id="revenueChart"></canvas>
            </div>
            <div class="chart-loading" id="revenueLoading">
              <div class="loading-spinner"></div>
              <span>Loading revenue data...</span>
            </div>
          </div>
        </div>
      </div>

      <div class="chart-container funnel-chart">
        <div class="chart-panel">
          <div class="panel-header">
            <div class="panel-title">
              <span class="panel-icon">📊</span>
              <h2>Conversion Funnel</h2>
              <span class="panel-subtitle">Customer journey analysis</span>
            </div>
            <div class="chart-controls">
              <button class="refresh-btn" onclick="loadFunnelChart()">
                <span>🔄</span>
              </button>
            </div>
          </div>
          <div class="chart-wrapper">
            <div class="chart-container-inner">
              <canvas id="funnelChart"></canvas>
            </div>
            <div class="chart-loading" id="funnelLoading">
              <div class="loading-spinner"></div>
              <span>Loading funnel data...</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Enhanced Table Section -->
    <div class="table-section">
      <div class="table-panel">
        <div class="panel-header">
          <div class="panel-title">
            <span class="panel-icon">🏆</span>
            <h2>Top Performing Products</h2>
            <span class="panel-subtitle">Best sellers this month</span>
          </div>
          <div class="table-controls">
            <button class="export-btn" onclick="exportTopProducts()">
              <span>📤</span> Export CSV
            </button>
            <button class="refresh-btn" onclick="loadTopProducts()">
              <span>🔄</span>
            </button>
          </div>
        </div>
        <div class="table-wrapper">
          <div class="table-loading" id="tableLoading">
            <div class="loading-spinner"></div>
            <span>Loading products...</span>
          </div>
          <table id="topProductsTable" class="modern-table">
            <thead>
              <tr>
                <th><span class="th-content">🛍️ Product</span></th>
                <th><span class="th-content">🏷️ SKU</span></th>
                <th><span class="th-content">📊 Sales</span></th>
                <th><span class="th-content">💰 Revenue</span></th>
                <th><span class="th-content">🎯 Performance</span></th>
              </tr>
            </thead>
            <tbody id="topProductsBody">
              <!-- Will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Modern Dashboard Styles */
* {
  box-sizing: border-box;
}

.dashboard-container {
  padding: 25px;
  max-width: 1600px;
  margin: 0 auto;
  min-height: 100vh;
  background: #f8fafc;
}

/* PRODUCTS Style Header */
.page-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 30px;
  padding: 0;
  min-height: 40px;
}

.page-title-section {
  display: flex;
  flex-direction: column;
  gap: 0;
  flex: 1;
}

.page-title {
  font-size: 28px;
  font-weight: 700;
  color: #2563eb;
  margin: 0;
  letter-spacing: 1px;
  text-transform: uppercase;
  line-height: 1.2;
  height: 40px;
  display: flex;
  align-items: center;
}

.page-actions {
  display: flex;
  gap: 15px;
  align-items: flex-start;
  height: 40px;
}

/* Dashboard Styles */

/* Enhanced Overview Cards */

.header-content {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.dashboard-title {
  font-size: 36px;
  font-weight: 800;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin: 0;
  display: flex;
  align-items: center;
  gap: 15px;
}

.title-icon {
  font-size: 40px;
  filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));
}

.header-stats {
  display: flex;
  gap: 20px;
}

.stat-item {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.stat-label {
  font-size: 12px;
  color: #64748b;
  font-weight: 500;
}

.stat-value {
  font-size: 14px;
  color: #1e293b;
  font-weight: 600;
}

.header-actions {
  display: flex;
  gap: 15px;
}

.action-btn {
  padding: 12px 24px;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
}

.action-btn.primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
}

.action-btn.secondary {
  background: rgba(255,255,255,0.7);
  color: #334155;
  border: 1px solid rgba(148, 163, 184, 0.3);
}

.action-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

/* Enhanced Overview Section */
.overview-section {
  margin-bottom: 50px;
}

.overview-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 25px;
}

.overview-card {
  position: relative;
  border-radius: 20px;
  padding: 30px;
  color: white;
  overflow: hidden;
  transition: all 0.4s ease;
  border: 1px solid rgba(255,255,255,0.1);
  backdrop-filter: blur(20px);
}

.overview-card:hover {
  transform: translateY(-8px) scale(1.02);
  box-shadow: 0 20px 50px rgba(0,0,0,0.2);
}

.card-background {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0.1;
}

.card-pattern {
  width: 100%;
  height: 100%;
  background-image: 
    radial-gradient(circle at 20% 50%, rgba(255,255,255,0.2) 1px, transparent 1px),
    radial-gradient(circle at 40% 20%, rgba(255,255,255,0.15) 1px, transparent 1px),
    radial-gradient(circle at 80% 80%, rgba(255,255,255,0.1) 1px, transparent 1px);
  background-size: 30px 30px, 50px 50px, 70px 70px;
}

.gradient-blue {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.gradient-pink {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
}

.gradient-cyan {
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
}

.gradient-green {
  background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
}

.gradient-orange {
  background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
}

.card-content {
  position: relative;
  z-index: 2;
  display: flex;
  align-items: flex-start;
  gap: 20px;
}

.card-icon {
  font-size: 48px;
  filter: drop-shadow(0 4px 8px rgba(0,0,0,0.2));
  min-width: 60px;
}

.card-info {
  flex: 1;
}

.card-info h3 {
  font-size: 16px;
  font-weight: 600;
  margin: 0 0 10px 0;
  opacity: 0.95;
  letter-spacing: 0.5px;
}

.value {
  font-size: 32px;
  font-weight: 800;
  margin: 0 0 15px 0;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.breakdown {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.payment-method {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 13px;
  opacity: 0.9;
}

.method-icon {
  font-size: 14px;
}

.trend {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 13px;
  margin-top: 10px;
}

.trend-icon {
  font-size: 14px;
}

/* Enhanced KPI Section */
.kpi-section {
  margin-bottom: 50px;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
}

.section-title {
  font-size: 28px;
  font-weight: 700;
  color: #1e293b;
  margin: 0;
  display: flex;
  align-items: center;
  gap: 12px;
}

.section-actions {
  display: flex;
  gap: 10px;
}

.mini-btn {
  width: 40px;
  height: 40px;
  border: none;
  border-radius: 10px;
  background: rgba(255,255,255,0.8);
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
}

.mini-btn:hover {
  background: white;
  transform: scale(1.1);
}

.kpi-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 20px;
}

.kpi-card {
  background: rgba(255,255,255,0.9);
  backdrop-filter: blur(20px);
  border-radius: 16px;
  padding: 25px;
  box-shadow: 0 8px 30px rgba(0,0,0,0.1);
  border: 1px solid rgba(255,255,255,0.2);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.kpi-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.kpi-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 40px rgba(0,0,0,0.15);
}

.kpi-label {
  font-size: 14px;
  color: #64748b;
  margin-bottom: 8px;
  font-weight: 500;
}

.kpi-value {
  font-size: 28px;
  font-weight: 800;
  color: #1e293b;
  margin-bottom: 8px;
}

.kpi-delta {
  font-size: 12px;
  font-weight: 600;
  padding: 4px 8px;
  border-radius: 12px;
  display: inline-block;
}

.kpi-delta.up {
  color: #059669;
  background: rgba(5, 150, 105, 0.1);
}

.kpi-delta.down {
  color: #dc2626;
  background: rgba(220, 38, 38, 0.1);
}

/* Enhanced Charts Section */
.charts-section {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 25px;
  margin-bottom: 50px;
}

.chart-container {
  background: rgba(255,255,255,0.9);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.1);
  border: 1px solid rgba(255,255,255,0.2);
  overflow: hidden;
  transition: all 0.3s ease;
}

.chart-container:hover {
  transform: translateY(-2px);
  box-shadow: 0 15px 50px rgba(0,0,0,0.15);
}

.chart-panel .panel-header {
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
  padding: 25px;
  border-bottom: 1px solid rgba(148, 163, 184, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.panel-title {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.panel-icon {
  font-size: 24px;
  margin-bottom: 5px;
}

.panel-title h2 {
  font-size: 20px;
  font-weight: 700;
  color: #1e293b;
  margin: 0;
}

.panel-subtitle {
  font-size: 13px;
  color: #64748b;
  font-weight: 500;
}

.chart-controls {
  display: flex;
  gap: 12px;
  align-items: center;
}

.modern-select {
  padding: 10px 16px;
  border: 1px solid rgba(148, 163, 184, 0.3);
  border-radius: 10px;
  font-size: 14px;
  background: rgba(255,255,255,0.8);
  backdrop-filter: blur(10px);
  cursor: pointer;
  transition: all 0.3s ease;
}

.modern-select:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.refresh-btn {
  width: 40px;
  height: 40px;
  border: none;
  border-radius: 10px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
}

.refresh-btn:hover {
  transform: scale(1.1) rotate(180deg);
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
}

.chart-wrapper {
  padding: 25px;
  position: relative;
  height: 350px;
}

.chart-container-inner {
  width: 100%;
  height: 100%;
  position: relative;
}

.chart-loading {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  color: #64748b;
  font-size: 14px;
}

.loading-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid rgba(102, 126, 234, 0.1);
  border-top: 3px solid #667eea;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Enhanced Table Section */
.table-section {
  margin-bottom: 50px;
}

.table-panel {
  background: rgba(255,255,255,0.9);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.1);
  border: 1px solid rgba(255,255,255,0.2);
  overflow: hidden;
}

.table-controls {
  display: flex;
  gap: 12px;
}

.export-btn {
  padding: 10px 20px;
  border: none;
  border-radius: 10px;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 8px;
}

.export-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
}

.table-wrapper {
  position: relative;
  overflow-x: auto;
}

.table-loading {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 10;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  color: #64748b;
  font-size: 14px;
}

.modern-table {
  width: 100%;
  border-collapse: collapse;
  background: transparent;
}

.modern-table th {
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
  padding: 20px;
  text-align: left;
  font-weight: 700;
  color: #1e293b;
  border-bottom: 2px solid rgba(148, 163, 184, 0.1);
  font-size: 14px;
}

.th-content {
  display: flex;
  align-items: center;
  gap: 8px;
}

.modern-table td {
  padding: 20px;
  border-bottom: 1px solid rgba(148, 163, 184, 0.1);
  color: #334155;
  font-size: 14px;
  font-weight: 500;
}

.modern-table tr:hover {
  background: rgba(102, 126, 234, 0.05);
}

.performance-badge {
  display: inline-flex;
  align-items: center;
  gap: 5px;
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 11px;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.performance-badge.excellent {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
}

.performance-badge.good {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  color: white;
}

.performance-badge.average {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  color: white;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .charts-section {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 768px) {
  .dashboard-container {
    padding: 15px;
  }
  
  .dashboard-header {
    flex-direction: column;
    gap: 20px;
    padding: 20px;
  }
  
  .overview-grid {
    grid-template-columns: 1fr;
  }
  
  .kpi-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .chart-wrapper {
    height: 250px;
    padding: 15px;
  }
  
  .dashboard-title {
    font-size: 28px;
  }
  
  .header-actions {
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .kpi-grid {
    grid-template-columns: 1fr;
  }
  
  .overview-grid {
    gap: 15px;
  }
  
  .overview-card {
    padding: 20px;
  }
  
  .card-content {
    flex-direction: column;
    text-align: center;
  }
  
  .value {
    font-size: 24px;
  }
}

/* Animation for loading states */
.fade-in {
  animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Global variables
let revenueChart, funnelChart;
let isLoading = false;

// Initialize dashboard
document.addEventListener('DOMContentLoaded', function() {
  showLoadingStates();
  loadDashboardData();
  initializeCharts();
  updateLastUpdated();
  
  // Auto-refresh every 5 minutes
  setInterval(() => {
    if (!isLoading) {
      loadDashboardData();
      loadRevenueChart();
      loadFunnelChart();
      updateLastUpdated();
    }
  }, 300000);
});

// Show loading states
function showLoadingStates() {
  document.getElementById('revenueLoading').style.display = 'flex';
  document.getElementById('funnelLoading').style.display = 'flex';
  document.getElementById('tableLoading').style.display = 'flex';
}

// Hide loading states
function hideLoadingStates() {
  document.getElementById('revenueLoading').style.display = 'none';
  document.getElementById('funnelLoading').style.display = 'none';
  document.getElementById('tableLoading').style.display = 'none';
}

// Load dashboard data with better error handling
async function loadDashboardData() {
  if (isLoading) return;
  isLoading = true;
  
  try {
    // Show loading states
    showLoadingStates();
    
    // Fetch all dashboard data in parallel
    const [overviewResponse, kpiResponse, topProductsResponse] = await Promise.all([
      fetch('/api/dashboard/overview'),
      fetch('/api/dashboard/stats'), 
      fetch('/api/dashboard/top-products')
    ]);
    
    if (!overviewResponse.ok || !kpiResponse.ok || !topProductsResponse.ok) {
      throw new Error('Failed to fetch dashboard data');
    }
    
    const [overviewData, kpiData, topProductsData] = await Promise.all([
      overviewResponse.json(),
      kpiResponse.json(), 
      topProductsResponse.json()
    ]);
    
    // Update all sections with real data
    updateOverviewCards(overviewData);
    updateKPICards(kpiData);
    updateTopProducts(topProductsData);
    updateLastUpdated();
    
    // Hide loading states
    hideLoadingStates();
    
    // Add success animation
    animateCards();
    
  } catch (error) {
    console.error('Error loading dashboard data:', error);
    showErrorState();
    hideLoadingStates();
  } finally {
    isLoading = false;
  }
}

// Show loading states for all sections
function showLoadingStates() {
  // Overview cards loading
  document.querySelectorAll('.overview-card .value').forEach(el => {
    el.textContent = 'Loading...';
  });
  
  // KPI cards loading
  document.querySelectorAll('.kpi-card .kpi-value').forEach(el => {
    el.textContent = '...';
  });
  
  // Top products loading
  const tbody = document.getElementById('topProductsBody');
  if (tbody) {
    tbody.innerHTML = '<tr><td colspan="5" style="text-align: center; padding: 20px;">Loading products...</td></tr>';
  }
}

// Hide loading states
function hideLoadingStates() {
  // Remove any loading indicators
  document.querySelectorAll('.loading-indicator').forEach(el => {
    el.style.display = 'none';
  });
}
  }
}

// Animate cards on load
function animateCards() {
  const cards = document.querySelectorAll('.overview-card, .kpi-card');
  cards.forEach((card, index) => {
    setTimeout(() => {
      card.classList.add('fade-in');
    }, index * 100);
  });
}

// Update overview cards with real backend data
function updateOverviewCards(overview) {
  // Format currency values properly
  const formatCurrency = (amount) => {
    return `₹${amount.toLocaleString('en-IN')}`;
  };
  
  const updates = [
    { id: 'todayTotal', value: overview.today?.total || 0 },
    { id: 'todayCash', value: overview.today?.cash || 0 },
    { id: 'todayCard', value: overview.today?.card || 0 },
    { id: 'todayCredit', value: overview.today?.credit || 0 },
    { id: 'yesterdayTotal', value: overview.yesterday?.total || 0 },
    { id: 'yesterdayCash', value: overview.yesterday?.cash || 0 },
    { id: 'yesterdayCard', value: overview.yesterday?.card || 0 },
    { id: 'yesterdayCredit', value: overview.yesterday?.credit || 0 },
    { id: 'thisMonthTotal', value: overview.thisMonth || 0 },
    { id: 'lastMonthTotal', value: overview.lastMonth || 0 },
    { id: 'allTimeTotal', value: overview.allTime || 0 }
  ];
  
  updates.forEach(update => {
    const element = document.getElementById(update.id);
    if (element) {
      // Animate from current value to new value
      const currentValue = parseInt(element.textContent.replace(/[₹,]/g, '')) || 0;
      animateValue(element, currentValue, update.value, 1000, formatCurrency);
    }
  });
}s
}

// Animate number values with custom formatter
function animateValue(element, start, end, duration, formatter = null) {
  let startTimestamp = null;
  const step = (timestamp) => {
    if (!startTimestamp) startTimestamp = timestamp;
    const progress = Math.min((timestamp - startTimestamp) / duration, 1);
    const current = Math.floor(progress * (end - start) + start);
    
    if (formatter) {
      element.textContent = formatter(current);
    } else {
      element.textContent = current.toLocaleString('en-IN');
    }
    
    if (progress < 1) {
      window.requestAnimationFrame(step);
    }
  };
  window.requestAnimationFrame(step);
}

// Update KPI cards with real backend data
function updateKPICards(stats) {
  const kpiGrid = document.getElementById('kpiGrid');
  if (!kpiGrid) return;
  
  kpiGrid.innerHTML = '';
  
  // Default KPI structure if no data
  const defaultKPIs = [
    { label: 'Total Orders', value: 0, delta: '+0%', type: 'orders' },
    { label: 'Total Revenue', value: 0, delta: '+0%', type: 'revenue' },
    { label: 'Active Users', value: 0, delta: '+0%', type: 'users' },
    { label: 'Conversion Rate', value: '0%', delta: '+0%', type: 'rate' }
  ];
  
  const kpiData = stats && stats.length > 0 ? stats : defaultKPIs;
  
  kpiData.forEach((stat, index) => {
    const kpiCard = document.createElement('div');
    kpiCard.className = 'kpi-card';
    kpiCard.style.animationDelay = `${index * 0.1}s`;
    
    const deltaClass = stat.delta?.startsWith('-') ? 'down' : 'up';
    const deltaIcon = stat.delta?.startsWith('-') ? '📉' : '📈';
    
    // Format value based on type
    let displayValue = stat.value;
    if (stat.type === 'revenue' && typeof stat.value === 'number') {
      displayValue = `₹${stat.value.toLocaleString('en-IN')}`;
    } else if (stat.type === 'orders' || stat.type === 'users') {
      displayValue = stat.value.toLocaleString('en-IN');
    }
    
    kpiCard.innerHTML = `
      <div class="kpi-label">${stat.label || 'N/A'}</div>
      <div class="kpi-value">${displayValue}</div>
      <div class="kpi-delta ${deltaClass}">
        ${deltaIcon} ${stat.delta || '+0%'} vs last week
      </div>
    `;
    kpiGrid.appendChild(kpiCard);
  });
}
}

// Update top products with enhanced table
function updateTopProducts(products) {
  const tbody = document.getElementById('topProductsBody');
  tbody.innerHTML = '';
  
  if (!products || products.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="5" style="text-align: center; padding: 40px; color: #64748b;">
          <div style="font-size: 48px; margin-bottom: 10px;">📦</div>
          No products data available
        </td>
      </tr>
    `;
    return;
  }
  
  products.forEach((product, index) => {
    const performance = getPerformanceBadge(product.sales);
    const row = document.createElement('tr');
    row.style.animationDelay = `${index * 0.05}s`;
    row.className = 'fade-in';
    
    row.innerHTML = `
      <td>
        <div style="display: flex; align-items: center; gap: 10px;">
          <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">
            ${(product.name || 'P').charAt(0).toUpperCase()}
          </div>
          <div>
            <div style="font-weight: 600; color: #1e293b;">${product.name || 'Unknown Product'}</div>
            <div style="font-size: 12px; color: #64748b;">Product</div>
          </div>
        </div>
      </td>
      <td>
        <code style="background: #f1f5f9; padding: 4px 8px; border-radius: 4px; font-size: 12px; color: #475569;">
          ${product.sku}
        </code>
      </td>
      <td>
        <div style="display: flex; align-items: center; gap: 8px;">
          <div style="font-weight: 600; color: #1e293b;">${product.sales}</div>
          <div style="width: 60px; height: 4px; background: #e2e8f0; border-radius: 2px; overflow: hidden;">
            <div style="width: ${Math.min(product.sales, 100)}%; height: 100%; background: linear-gradient(90deg, #10b981, #059669); transition: width 0.5s ease;"></div>
          </div>
        </div>
      </td>
      <td>
        <div style="font-weight: 700; color: #059669;">
          ₹${product.revenue.toLocaleString('en-IN')}
        </div>
      </td>
      <td>
        <span class="performance-badge ${performance.class}">
          ${performance.icon} ${performance.text}
        </span>
      </td>
    `;
    tbody.appendChild(row);
  });
  
  hideLoadingStates();
}

// Enhanced performance badge with icons
function getPerformanceBadge(sales) {
  if (sales > 80) return { class: 'excellent', text: 'Excellent', icon: '🔥' };
  if (sales > 50) return { class: 'good', text: 'Good', icon: '⭐' };
  return { class: 'average', text: 'Average', icon: '📊' };
}

// Initialize charts with better styling
function initializeCharts() {
  loadRevenueChart();
  loadFunnelChart();
}

// Enhanced revenue chart
async function loadRevenueChart() {
  try {
    document.getElementById('revenueLoading').style.display = 'flex';
    
    const months = document.getElementById('revenue-range').value;
    const response = await fetch(`/api/dashboard/revenue?months=${months}`);
    if (!response.ok) throw new Error('Failed to fetch revenue data');
    
    const data = await response.json();
    
    const ctx = document.getElementById('revenueChart').getContext('2d');
    
    if (revenueChart) {
      revenueChart.destroy();
    }
    
    revenueChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: data.map(d => d.month),
        datasets: [{
          label: 'Revenue',
          data: data.map(d => d.revenue),
          borderColor: '#667eea',
          backgroundColor: 'rgba(102, 126, 234, 0.1)',
          borderWidth: 4,
          fill: true,
          tension: 0.4,
          pointBackgroundColor: '#667eea',
          pointBorderColor: '#fff',
          pointBorderWidth: 3,
          pointRadius: 8,
          pointHoverRadius: 12,
          pointHoverBackgroundColor: '#764ba2',
          pointHoverBorderColor: '#fff',
          pointHoverBorderWidth: 3
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: 'rgba(0,0,0,0.8)',
            titleColor: '#fff',
            bodyColor: '#fff',
            borderColor: '#667eea',
            borderWidth: 2,
            cornerRadius: 8,
            displayColors: false,
            callbacks: {
              title: function(context) {
                return context[0].label;
              },
              label: function(context) {
                return `Revenue: ₹${context.parsed.y.toLocaleString('en-IN')}`;
              }
            }
          }
        },
        scales: {
          x: {
            grid: {
              display: false
            },
            border: {
              display: false
            },
            ticks: {
              color: '#64748b',
              font: {
                weight: 500
              }
            }
          },
          y: {
            grid: {
              color: 'rgba(148, 163, 184, 0.1)',
              drawBorder: false
            },
            border: {
              display: false
            },
            ticks: {
              color: '#64748b',
              font: {
                weight: 500
              },
              callback: function(value) {
                return '₹' + value.toLocaleString('en-IN');
              }
            }
          }
        },
        elements: {
          point: {
            hoverRadius: 10
          }
        },
        animation: {
          duration: 2000,
          easing: 'easeInOutQuart'
        }
      }
    });
    
    document.getElementById('revenueLoading').style.display = 'none';
  } catch (error) {
    console.error('Error loading revenue chart:', error);
    document.getElementById('revenueLoading').innerHTML = '<div style="color: #e74c3c;">❌ Failed to load chart</div>';
  }
}

// Enhanced funnel chart
async function loadFunnelChart() {
  try {
    document.getElementById('funnelLoading').style.display = 'flex';
    
    const response = await fetch('/api/dashboard/funnel');
    if (!response.ok) throw new Error('Failed to fetch funnel data');
    
    const data = await response.json();
    console.log('🎯 Funnel Data:', data); // Debug log
    
    const ctx = document.getElementById('funnelChart').getContext('2d');
    
    if (funnelChart) {
      funnelChart.destroy();
    }
    
    funnelChart = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: ['👥 Visitors', '🔐 Users', '🛒 Orders', '💰 Revenue (K)'],
        datasets: [{
          data: [data.visitors, data.users, data.orders, Math.round(data.revenue/1000)],
          backgroundColor: [
            '#FF6B6B', // Coral Red for Visitors
            '#4ECDC4', // Turquoise for Users  
            '#45B7D1', // Sky Blue for Orders
            '#96CEB4'  // Mint Green for Revenue
          ],
          borderWidth: 2,
          borderColor: '#ffffff',
          hoverOffset: 10,
          hoverBorderWidth: 3,
          // Add hover colors for better distinction
          hoverBackgroundColor: [
            '#FF5252', // Darker coral for hover
            '#26C6DA', // Darker turquoise for hover
            '#2196F3', // Darker blue for hover
            '#66BB6A'  // Darker green for hover
          ]
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              padding: 20,
              font: {
                size: 12,
                weight: 600
              },
              color: '#334155',
              usePointStyle: true,
              pointStyle: 'circle'
            }
          },
          tooltip: {
            backgroundColor: 'rgba(0,0,0,0.8)',
            titleColor: '#fff',
            bodyColor: '#fff',
            borderColor: '#667eea',
            borderWidth: 2,
            cornerRadius: 8,
            callbacks: {
              label: function(context) {
                const label = context.label || '';
                const value = context.parsed;
                const percentage = ((value / context.dataset.data.reduce((a, b) => a + b, 0)) * 100).toFixed(1);
                return `${label}: ${value.toLocaleString()} (${percentage}%)`;
              }
            }
          }
        },
        animation: {
          animateRotate: true,
          duration: 2000
        }
      }
    });
    
    document.getElementById('funnelLoading').style.display = 'none';
  } catch (error) {
    console.error('Error loading funnel chart:', error);
    document.getElementById('funnelLoading').innerHTML = '<div style="color: #e74c3c;">❌ Failed to load chart</div>';
  }
}

// Export functionality with better UX
function exportTopProducts() {
  try {
    const table = document.getElementById('topProductsTable');
    let csv = [];
    
    // Headers
    const headers = Array.from(table.querySelectorAll('th')).map(th => 
      th.textContent.replace(/[^\w\s]/gi, '').trim()
    );
    csv.push(headers.join(','));
    
    // Rows
    const rows = Array.from(table.querySelectorAll('tbody tr'));
    rows.forEach(row => {
      const cols = Array.from(row.querySelectorAll('td')).map(td => {
        let text = td.textContent.replace(/[^\w\s₹.,]/gi, '').trim();
        return `"${text}"`;
      });
      if (cols.length > 1) { // Skip empty state row
        csv.push(cols.join(','));
      }
    });
    
    // Download
    const csvContent = csv.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `top-products-${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
    
    // Show success message
    showToast('📊 Data exported successfully!', 'success');
  } catch (error) {
    console.error('Export error:', error);
    showToast('❌ Export failed. Please try again.', 'error');
  }
}

// Export dashboard summary
function exportDashboard() {
  // This would export a comprehensive dashboard report
  showToast('📊 Dashboard export feature coming soon!', 'info');
}

// Show toast notifications
function showToast(message, type = 'info') {
  const toast = document.createElement('div');
  toast.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 25px;
    background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
    color: white;
    border-radius: 10px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    z-index: 9999;
    font-weight: 600;
    transform: translateX(100%);
    transition: transform 0.3s ease;
  `;
  toast.textContent = message;
  
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.style.transform = 'translateX(0)';
  }, 100);
  
  setTimeout(() => {
    toast.style.transform = 'translateX(100%)';
    setTimeout(() => toast.remove(), 300);
  }, 3000);
}

// Show error state
function showErrorState() {
  showToast('❌ Failed to load dashboard data', 'error');
}

// Update last updated timestamp
function updateLastUpdated() {
  const now = new Date();
  const timeString = now.toLocaleString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
  document.getElementById('lastUpdated').textContent = timeString;
}

// Event listeners
document.getElementById('revenue-range').addEventListener('change', loadRevenueChart);

// Add loading animation to buttons
document.querySelectorAll('.refresh-btn, .export-btn, .action-btn').forEach(btn => {
  btn.addEventListener('click', function() {
    this.style.transform = 'scale(0.95)';
    setTimeout(() => {
      this.style.transform = '';
    }, 150);
  });
});
</script>

<%- include('partials/footer') %>
