<%- include('partials/head') %>
<%- include('./partials/sidebar') %>
<%- include('./partials/topbar') %>

<div class="content">
  <div class="dashboard-container">
    <!-- Page Header -->
    <div class="page-header">
      <div class="page-title-section">
        <h1 class="page-title">ROLE MANAGEMENT</h1>
      </div>
      <div class="page-actions">
        <button class="refresh-btn" onclick="loadRoleData()">🔄</button>
      </div>
    </div>

    <!-- Role Management Cards -->
    <div class="role-management-container">
      <!-- Create New Role Card -->
      <div class="role-card create-role-card">
        <div class="card-header">
          <h3>🎯 Create New Role</h3>
          <p>Define a new role with custom permissions</p>
        </div>
        <div class="card-body">
          <form id="createRoleForm">
            <div class="form-group">
              <label for="roleName">Role Name</label>
              <input type="text" id="roleName" name="roleName" placeholder="e.g., Manager, Editor, Viewer" required>
            </div>
            
            <div class="form-group">
              <label>Permissions</label>
              <div class="permissions-grid">
                <div class="permission-item">
                  <input type="checkbox" id="perm_dashboard" name="permissions" value="dashboard">
                  <label for="perm_dashboard">📊 Dashboard Access</label>
                </div>
                <div class="permission-item">
                  <input type="checkbox" id="perm_products" name="permissions" value="products">
                  <label for="perm_products">🛍️ Product Management</label>
                </div>
                <div class="permission-item">
                  <input type="checkbox" id="perm_orders" name="permissions" value="orders">
                  <label for="perm_orders">📦 Order Management</label>
                </div>
                <div class="permission-item">
                  <input type="checkbox" id="perm_users" name="permissions" value="users">
                  <label for="perm_users">👥 User Management</label>
                </div>
                <div class="permission-item">
                  <input type="checkbox" id="perm_analytics" name="permissions" value="analytics">
                  <label for="perm_analytics">📈 Analytics Access</label>
                </div>
                <div class="permission-item">
                  <input type="checkbox" id="perm_settings" name="permissions" value="settings">
                  <label for="perm_settings">⚙️ System Settings</label>
                </div>
                <div class="permission-item">
                  <input type="checkbox" id="perm_themes" name="permissions" value="themes">
                  <label for="perm_themes">🎨 Theme Management</label>
                </div>
                <div class="permission-item">
                  <input type="checkbox" id="perm_roles" name="permissions" value="roles">
                  <label for="perm_roles">🔐 Role Management</label>
                </div>
              </div>
            </div>
            
            <button type="submit" class="btn-primary">
              <span>🚀</span> Create Role
            </button>
          </form>
        </div>
      </div>

      <!-- Assign Role Card -->
      <div class="role-card assign-role-card">
        <div class="card-header">
          <h3>👤 Assign Role to User</h3>
          <p>Assign existing roles to users</p>
        </div>
        <div class="card-body">
          <form id="assignRoleForm">
            <div class="form-group">
              <label for="userEmail">User Email</label>
              <input type="email" id="userEmail" name="userEmail" placeholder="user@example.com" required>
            </div>
            
            <div class="form-group">
              <label for="assignRole"></label>
              <select id="assignRole" name="roleName" required>
                <option value="">Select a role...</option>
                <% if (existingRoles && existingRoles.length > 0) { %>
                  <% existingRoles.forEach(role => { %>
                    <option value="<%= role %>"><%= role %></option>
                  <% }) %>
                <% } %>
              </select>
            </div>
            
            <button type="submit" class="btn-secondary">
              <span>🎯</span> Assign Role
            </button>
          </form>
        </div>
      </div>
    </div>

    <!-- Existing Roles Table -->
    <div class="roles-table-section">
      <div class="table-header">
        <h2>📋 Existing Roles & Users</h2>
        <div class="table-actions">
          <button class="export-btn" onclick="exportRoles()">
            <span>📥</span> Export
          </button>
        </div>
      </div>
      
      <div class="table-container">
        <table class="roles-table">
          <thead>
            <tr>
              <th>👤 User/Role</th>
              <th>📧 Email</th>
              <th>🎭 Role</th>
              <th>🔑 Permissions</th>
              <th>📅 Created</th>
              <th>⚡ Actions</th>
            </tr>
          </thead>
          <tbody id="rolesTableBody">
            <% if (usersWithRoles && usersWithRoles.length > 0) { %>
              <% usersWithRoles.filter(user => user.email && user.email.trim() !== '').forEach(user => { %>
                <tr>
                  <td>
                    <div class="user-info">
                      <span class="user-avatar">👤</span>
                      <span><%= user.email %></span>
                    </div>
                  </td>
                  <td><%= user.email %></td>
                  <td>
                    <span class="role-badge role-<%= user.role %>"><%= user.role %></span>
                  </td>
                  <td>
                    <div class="permissions-list">
                      <% if (user.permissions && user.permissions.length > 0) { %>
                        <% user.permissions.slice(0, 3).forEach(perm => { %>
                          <span class="permission-tag"><%= perm %></span>
                        <% }) %>
                        <% if (user.permissions.length > 3) { %>
                          <span class="more-permissions">+<%= user.permissions.length - 3 %> more</span>
                        <% } %>
                      <% } else { %>
                        <span class="no-permissions">No permissions</span>
                      <% } %>
                    </div>
                  </td>
                  <td><%= user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A' %></td>
                  <td>
                    <div class="action-buttons">
                      <button class="edit-btn" onclick="editRole('<%= user._id %>')">✏️</button>
                      <button class="delete-btn" onclick="deleteRole('<%= user._id %>')">🗑️</button>
                    </div>
                  </td>
                </tr>
              <% }) %>
            <% } else { %>
              <tr>
                <td colspan="6" class="no-data">
                  <div class="empty-state">
                    <span class="empty-icon">🎭</span>
                    <p>No roles assigned yet</p>
                    <small>Create and assign roles to users to get started</small>
                  </div>
                </td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<style>
/* Role Management Styles */
.role-management-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 30px;
  margin-bottom: 40px;
}

.role-card {
  background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(240,248,255,0.9) 100%);
  border-radius: 20px;
  padding: 30px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.1);
  border: 1px solid rgba(255,255,255,0.3);
  backdrop-filter: blur(10px);
}

.create-role-card {
  border-left: 5px solid #667eea;
}

.assign-role-card {
  border-left: 5px solid #f093fb;
}

.card-header h3 {
  font-size: 24px;
  font-weight: 700;
  color: #1e293b;
  margin: 0 0 8px 0;
}

.card-header p {
  color: #64748b;
  margin: 0 0 25px 0;
  font-size: 14px;
}

.form-group {
  margin-bottom: 25px;
}

.form-group label {
  display: block;
  font-weight: 600;
  color: #374151;
  margin-bottom: 8px;
  font-size: 14px;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e5e7eb;
  border-radius: 12px;
  font-size: 14px;
  transition: all 0.3s ease;
  background: white;
}

.form-group input:focus,
.form-group select:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.permissions-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
  margin-top: 10px;
}

.permission-item {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px;
  background: rgba(255,255,255,0.7);
  border-radius: 10px;
  border: 1px solid rgba(0,0,0,0.1);
  transition: all 0.3s ease;
}

.permission-item:hover {
  background: rgba(102, 126, 234, 0.1);
  border-color: #667eea;
}

.permission-item input[type="checkbox"] {
  width: auto;
  margin: 0;
}

.permission-item label {
  margin: 0;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
}

.btn-primary,
.btn-secondary {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 14px 24px;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 14px;
  width: 100%;
  justify-content: center;
}

.btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.btn-secondary {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  color: white;
}

.btn-primary:hover,
.btn-secondary:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.2);
}

/* Table Styles */
.roles-table-section {
  background: white;
  border-radius: 20px;
  padding: 30px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}

.table-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
}

.table-header h2 {
  font-size: 24px;
  font-weight: 700;
  color: #1e293b;
  margin: 0;
}

.export-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 20px;
  background: #10b981;
  color: white;
  border: none;
  border-radius: 10px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.export-btn:hover {
  background: #059669;
  transform: translateY(-1px);
}

.table-container {
  overflow-x: auto;
  border-radius: 15px;
  border: 1px solid #e5e7eb;
}

.roles-table {
  width: 100%;
  border-collapse: collapse;
  background: white;
}

.roles-table th {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 15px;
  text-align: left;
  font-weight: 600;
  font-size: 13px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.roles-table td {
  padding: 15px;
  border-bottom: 1px solid #f3f4f6;
  vertical-align: middle;
}

.roles-table tbody tr:hover {
  background: rgba(102, 126, 234, 0.05);
}

.user-info {
  display: flex;
  align-items: center;
  gap: 10px;
}

.user-avatar {
  width: 35px;
  height: 35px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 16px;
}

.role-badge {
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.role-superadmin {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  color: white;
}

.role-admin {
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
  color: white;
}

.role-editor {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
}

.role-manager {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  color: white;
}

.permissions-list {
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
}

.permission-tag {
  background: rgba(102, 126, 234, 0.1);
  color: #667eea;
  padding: 4px 8px;
  border-radius: 6px;
  font-size: 11px;
  font-weight: 500;
}

.more-permissions {
  color: #64748b;
  font-size: 11px;
  font-weight: 500;
}

.no-permissions {
  color: #9ca3af;
  font-style: italic;
  font-size: 12px;
}

.action-buttons {
  display: flex;
  gap: 8px;
}

.edit-btn,
.delete-btn {
  width: 35px;
  height: 35px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
}

.edit-btn {
  background: #fbbf24;
  color: white;
}

.delete-btn {
  background: #ef4444;
  color: white;
}

.edit-btn:hover,
.delete-btn:hover {
  transform: scale(1.1);
}

.empty-state {
  text-align: center;
  padding: 40px;
  color: #9ca3af;
}

.empty-icon {
  font-size: 48px;
  display: block;
  margin-bottom: 15px;
}

.no-data p {
  font-size: 18px;
  font-weight: 600;
  margin: 0 0 5px 0;
}

.no-data small {
  font-size: 14px;
}

/* Responsive */
@media (max-width: 768px) {
  .role-management-container {
    grid-template-columns: 1fr;
  }
  
  .permissions-grid {
    grid-template-columns: 1fr;
  }
}
</style>

<script>
// Role Management JavaScript
let isLoading = false;

// Create Role Form Handler
document.getElementById('createRoleForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  if (isLoading) return;
  isLoading = true;
  
  const formData = new FormData(e.target);
  const roleName = formData.get('roleName');
  const permissions = formData.getAll('permissions');
  
  if (!roleName.trim()) {
    alert('Please enter a role name');
    isLoading = false;
    return;
  }
  
  if (permissions.length === 0) {
    alert('Please select at least one permission');
    isLoading = false;
    return;
  }
  
  try {
    const response = await fetch('/api/roles/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        roleName: roleName.trim(),
        permissions: permissions
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      alert(`✅ ${result.message}`);
      e.target.reset();
      loadRoleData(); // Refresh the page data
    } else {
      alert(`❌ Error: ${result.error}`);
    }
  } catch (error) {
    console.error('Error creating role:', error);
    alert('❌ Failed to create role. Please try again.');
  } finally {
    isLoading = false;
  }
});

// Assign Role Form Handler
document.getElementById('assignRoleForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  if (isLoading) return;
  isLoading = true;
  
  const formData = new FormData(e.target);
  const userEmail = formData.get('userEmail');
  const roleName = formData.get('roleName');
  
  if (!userEmail.trim() || !roleName) {
    alert('Please fill in all fields');
    isLoading = false;
    return;
  }
  
  try {
    const response = await fetch('/api/roles/assign', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userEmail: userEmail.trim(),
        roleName: roleName
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      alert(`✅ ${result.message}`);
      e.target.reset();
      loadRoleData(); // Refresh the page data
    } else {
      alert(`❌ Error: ${result.error}`);
    }
  } catch (error) {
    console.error('Error assigning role:', error);
    alert('❌ Failed to assign role. Please try again.');
  } finally {
    isLoading = false;
  }
});

// Load Role Data
async function loadRoleData() {
  try {
    // Reload the page to get updated data
    window.location.reload();
  } catch (error) {
    console.error('Error loading role data:', error);
  }
}

// Export Roles
function exportRoles() {
  const table = document.querySelector('.roles-table');
  let csv = '';
  
  // Headers
  const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent.trim());
  csv += headers.join(',') + '\n';
  
  // Rows
  const rows = Array.from(table.querySelectorAll('tbody tr'));
  rows.forEach(row => {
    const cells = Array.from(row.querySelectorAll('td')).map(td => {
      return td.textContent.trim().replace(/,/g, ';');
    });
    csv += cells.join(',') + '\n';
  });
  
  // Download
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'roles_export.csv';
  a.click();
  window.URL.revokeObjectURL(url);
}

// Edit Role (placeholder)
function editRole(roleId) {
  alert('Edit functionality will be implemented soon');
}

// Delete Role (placeholder)
function deleteRole(roleId) {
  if (confirm('Are you sure you want to delete this role assignment?')) {
    // Implementation for delete
    alert('Delete functionality will be implemented soon');
  }
}

// Page load initialization
document.addEventListener('DOMContentLoaded', () => {
  console.log('🎭 Role Management page loaded');
});
</script>

<%- include('partials/footer') %>